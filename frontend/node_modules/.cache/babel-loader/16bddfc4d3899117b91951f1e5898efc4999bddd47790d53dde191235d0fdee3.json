{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\suyash\\\\Code\\\\myproject\\\\frontend\\\\src\\\\components\\\\SchedulePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport maplibregl from 'maplibre-gl';\nimport 'maplibre-gl/dist/maplibre-gl.css';\nimport { UserContext } from './UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SchedulePage = () => {\n  _s();\n  const {\n    warehouseAccess\n  } = useContext(UserContext); // Access warehouseAccess from context\n  const [trucks, setTrucks] = useState([]);\n  const [expandedTruckId, setExpandedTruckId] = useState(null);\n  const [map, setMap] = useState(null);\n  const [routeDetails, setRouteDetails] = useState([]); // Store parsed route details\n\n  useEffect(() => {\n    // Initialize the MapLibre map\n    const mapInstance = new maplibregl.Map({\n      container: 'map',\n      style: 'https://demotiles.maplibre.org/style.json',\n      center: [78.9629, 20.5937],\n      // Default center (India)\n      zoom: 4\n    });\n    setMap(mapInstance);\n\n    // Cleanup map instance on component unmount\n    return () => mapInstance.remove();\n  }, []);\n  useEffect(() => {\n    // Fetch trucks for all accessible warehouses\n    if (warehouseAccess) {\n      const warehouseIds = warehouseAccess.split(',').map(id => id.trim()); // Split and trim IDs\n      fetchAllTrucks(warehouseIds);\n    }\n  }, [warehouseAccess]);\n  const fetchAllTrucks = async warehouseIds => {\n    const allTrucks = [];\n    const addedTruckIds = new Set(); // Track unique truck IDs\n\n    for (const warehouseId of warehouseIds) {\n      try {\n        const response = await fetch(`/api/getScheduledTrucks?warehouseId=${warehouseId}`);\n        const data = await response.json();\n        if (data) {\n          data.forEach(truck => {\n            if (!addedTruckIds.has(truck.truck_id)) {\n              addedTruckIds.add(truck.truck_id);\n              allTrucks.push(truck);\n            }\n          });\n        }\n      } catch (err) {\n        console.error(`Error fetching trucks for warehouse ${warehouseId}:`, err);\n      }\n    }\n    setTrucks(allTrucks);\n  };\n  const handleTruckClick = async truck => {\n    // Toggle expandedTruckId\n    if (expandedTruckId === truck.truck_id) {\n      setExpandedTruckId(null); // Collapse the details\n      setRouteDetails([]); // Clear route details\n      return;\n    }\n    try {\n      const idResponse = await fetch(`/api/devices/getId?uniqueId=${truck.truck_id}`);\n      if (!idResponse.ok) throw new Error(`Error fetching actual ID: ${idResponse.status}`);\n      const idData = await idResponse.json();\n      const actualId = idData.id; // Assuming the API returns the actual_id in this field\n\n      const geofenceResponse = await fetch(`/api/devices/${actualId}/manage-geofence`);\n      if (!geofenceResponse.ok) throw new Error(`Error fetching geofence: ${geofenceResponse.status}`);\n      const geofenceData = await geofenceResponse.json();\n      const geofenceArea = geofenceData.geofence.area; // Assuming the geofence area is in \"area\" field\n\n      const routeCoordinates = parseLineString(geofenceArea); // Parse LINESTRING into coordinates\n      updateMapWithRoute(routeCoordinates);\n\n      // Expand the selected truck row for additional details\n      setExpandedTruckId(truck.truck_id);\n\n      // Parse route_estimated_arrival if present and display it in a structured format\n      if (truck.route_estimated_arrival) {\n        try {\n          const details = JSON.parse(truck.route_estimated_arrival);\n          setRouteDetails(details);\n        } catch (err) {\n          console.error('Error parsing route_estimated_arrival:', err);\n          setRouteDetails([]);\n        }\n      } else {\n        setRouteDetails([]);\n      }\n    } catch (err) {\n      console.error('Error:', err);\n    }\n  };\n  const updateMapWithRoute = coordinates => {\n    if (!map || !coordinates.length) return;\n\n    // Calculate the center of the route\n    const center = calculateCenter(coordinates);\n    map.flyTo({\n      center,\n      // Fly to the center of the route\n      zoom: 11\n    });\n    if (map.getSource('route')) {\n      map.getSource('route').setData({\n        type: 'Feature',\n        geometry: {\n          type: 'LineString',\n          coordinates\n        }\n      });\n    } else {\n      map.addSource('route', {\n        type: 'geojson',\n        data: {\n          type: 'Feature',\n          geometry: {\n            type: 'LineString',\n            coordinates\n          }\n        }\n      });\n      map.addLayer({\n        id: 'route',\n        type: 'line',\n        source: 'route',\n        layout: {\n          'line-join': 'round',\n          'line-cap': 'round'\n        },\n        paint: {\n          'line-color': '#007bff',\n          'line-width': 4\n        }\n      });\n    }\n  };\n\n  // Helper function to parse LINESTRING into coordinates\n  const parseLineString = lineString => {\n    // Remove \"LINESTRING(\" and \")\"\n    const coordinateString = lineString.replace('LINESTRING(', '').replace(')', '');\n    // Split into coordinate pairs\n    const pairs = coordinateString.split(',');\n    // Convert pairs into [longitude, latitude] arrays\n    return pairs.map(pair => {\n      const [lat, lon] = pair.trim().split(' ');\n      return [parseFloat(lon), parseFloat(lat)];\n    });\n  };\n\n  // Helper function to calculate the center of a route\n  const calculateCenter = coordinates => {\n    const total = coordinates.reduce((acc, coord) => {\n      acc[0] += coord[0]; // Sum of longitudes\n      acc[1] += coord[1]; // Sum of latitudes\n      return acc;\n    }, [0, 0]);\n    return [total[0] / coordinates.length, total[1] / coordinates.length];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        padding: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Admin Truck Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        style: {\n          width: '100%',\n          borderCollapse: 'collapse',\n          marginBottom: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Truck ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Truck Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: trucks.length > 0 ? trucks.map(truck => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              onClick: () => handleTruckClick(truck),\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: truck.truck_id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: truck.truck_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  children: expandedTruckId === truck.truck_id ? 'Hide Details' : 'View Route & Schedule'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 19\n            }, this), expandedTruckId === truck.truck_id && /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"3\",\n                children: routeDetails.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n                  border: \"1\",\n                  style: {\n                    width: '100%',\n                    borderCollapse: 'collapse'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"From\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 209,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"To\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 210,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Estimated Arrival Time\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 211,\n                        columnNumber: 33\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 208,\n                      columnNumber: 31\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: routeDetails.map((segment, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        children: segment.from\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 217,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: segment.to\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 218,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: new Date(segment.arrival_time).toLocaleString()\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 219,\n                        columnNumber: 35\n                      }, this)]\n                    }, index, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 216,\n                      columnNumber: 33\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 214,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 27\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No route schedule available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 21\n            }, this)]\n          }, truck.truck_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"3\",\n              style: {\n                textAlign: 'center'\n              },\n              children: \"No trucks available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        flex: 1,\n        height: '100vh',\n        borderLeft: '1px solid #ccc'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_s(SchedulePage, \"eqSLtTeW0UG0WoiE3QKG+aPCmKE=\");\n_c = SchedulePage;\nexport default SchedulePage;\nvar _c;\n$RefreshReg$(_c, \"SchedulePage\");","map":{"version":3,"names":["React","useEffect","useState","useContext","maplibregl","UserContext","jsxDEV","_jsxDEV","SchedulePage","_s","warehouseAccess","trucks","setTrucks","expandedTruckId","setExpandedTruckId","map","setMap","routeDetails","setRouteDetails","mapInstance","Map","container","style","center","zoom","remove","warehouseIds","split","id","trim","fetchAllTrucks","allTrucks","addedTruckIds","Set","warehouseId","response","fetch","data","json","forEach","truck","has","truck_id","add","push","err","console","error","handleTruckClick","idResponse","ok","Error","status","idData","actualId","geofenceResponse","geofenceData","geofenceArea","geofence","area","routeCoordinates","parseLineString","updateMapWithRoute","route_estimated_arrival","details","JSON","parse","coordinates","length","calculateCenter","flyTo","getSource","setData","type","geometry","addSource","addLayer","source","layout","paint","lineString","coordinateString","replace","pairs","pair","lat","lon","parseFloat","total","reduce","acc","coord","display","children","flex","padding","fileName","_jsxFileName","lineNumber","columnNumber","border","width","borderCollapse","marginBottom","Fragment","onClick","truck_name","colSpan","segment","index","from","to","Date","arrival_time","toLocaleString","textAlign","height","borderLeft","_c","$RefreshReg$"],"sources":["C:/Users/suyash/Code/myproject/frontend/src/components/SchedulePage.jsx"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport maplibregl from 'maplibre-gl';\r\nimport 'maplibre-gl/dist/maplibre-gl.css';\r\nimport { UserContext } from './UserContext';\r\n\r\nconst SchedulePage = () => {\r\n  const { warehouseAccess } = useContext(UserContext); // Access warehouseAccess from context\r\n  const [trucks, setTrucks] = useState([]);\r\n  const [expandedTruckId, setExpandedTruckId] = useState(null);\r\n  const [map, setMap] = useState(null);\r\n  const [routeDetails, setRouteDetails] = useState([]); // Store parsed route details\r\n\r\n  useEffect(() => {\r\n    // Initialize the MapLibre map\r\n    const mapInstance = new maplibregl.Map({\r\n      container: 'map',\r\n      style: 'https://demotiles.maplibre.org/style.json',\r\n      center: [78.9629, 20.5937], // Default center (India)\r\n      zoom: 4,\r\n    });\r\n\r\n    setMap(mapInstance);\r\n\r\n    // Cleanup map instance on component unmount\r\n    return () => mapInstance.remove();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Fetch trucks for all accessible warehouses\r\n    if (warehouseAccess) {\r\n      const warehouseIds = warehouseAccess.split(',').map((id) => id.trim()); // Split and trim IDs\r\n      fetchAllTrucks(warehouseIds);\r\n    }\r\n  }, [warehouseAccess]);\r\n\r\n  const fetchAllTrucks = async (warehouseIds) => {\r\n    const allTrucks = [];\r\n    const addedTruckIds = new Set(); // Track unique truck IDs\r\n\r\n    for (const warehouseId of warehouseIds) {\r\n      try {\r\n        const response = await fetch(`/api/getScheduledTrucks?warehouseId=${warehouseId}`);\r\n        const data = await response.json();\r\n\r\n        if (data) {\r\n          data.forEach((truck) => {\r\n            if (!addedTruckIds.has(truck.truck_id)) {\r\n              addedTruckIds.add(truck.truck_id);\r\n              allTrucks.push(truck);\r\n            }\r\n          });\r\n        }\r\n      } catch (err) {\r\n        console.error(`Error fetching trucks for warehouse ${warehouseId}:`, err);\r\n      }\r\n    }\r\n\r\n    setTrucks(allTrucks);\r\n  };\r\n\r\n  const handleTruckClick = async (truck) => {\r\n    // Toggle expandedTruckId\r\n    if (expandedTruckId === truck.truck_id) {\r\n      setExpandedTruckId(null); // Collapse the details\r\n      setRouteDetails([]); // Clear route details\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const idResponse = await fetch(`/api/devices/getId?uniqueId=${truck.truck_id}`);\r\n      if (!idResponse.ok) throw new Error(`Error fetching actual ID: ${idResponse.status}`);\r\n      const idData = await idResponse.json();\r\n      const actualId = idData.id; // Assuming the API returns the actual_id in this field\r\n\r\n      const geofenceResponse = await fetch(`/api/devices/${actualId}/manage-geofence`);\r\n      if (!geofenceResponse.ok) throw new Error(`Error fetching geofence: ${geofenceResponse.status}`);\r\n      const geofenceData = await geofenceResponse.json();\r\n      const geofenceArea = geofenceData.geofence.area; // Assuming the geofence area is in \"area\" field\r\n\r\n      const routeCoordinates = parseLineString(geofenceArea); // Parse LINESTRING into coordinates\r\n      updateMapWithRoute(routeCoordinates);\r\n\r\n      // Expand the selected truck row for additional details\r\n      setExpandedTruckId(truck.truck_id);\r\n\r\n      // Parse route_estimated_arrival if present and display it in a structured format\r\n      if (truck.route_estimated_arrival) {\r\n        try {\r\n          const details = JSON.parse(truck.route_estimated_arrival);\r\n          setRouteDetails(details);\r\n        } catch (err) {\r\n          console.error('Error parsing route_estimated_arrival:', err);\r\n          setRouteDetails([]);\r\n        }\r\n      } else {\r\n        setRouteDetails([]);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error:', err);\r\n    }\r\n  };\r\n\r\n  const updateMapWithRoute = (coordinates) => {\r\n    if (!map || !coordinates.length) return;\r\n\r\n    // Calculate the center of the route\r\n    const center = calculateCenter(coordinates);\r\n\r\n    map.flyTo({\r\n      center, // Fly to the center of the route\r\n      zoom: 11,\r\n    });\r\n\r\n    if (map.getSource('route')) {\r\n      map.getSource('route').setData({\r\n        type: 'Feature',\r\n        geometry: {\r\n          type: 'LineString',\r\n          coordinates,\r\n        },\r\n      });\r\n    } else {\r\n      map.addSource('route', {\r\n        type: 'geojson',\r\n        data: {\r\n          type: 'Feature',\r\n          geometry: {\r\n            type: 'LineString',\r\n            coordinates,\r\n          },\r\n        },\r\n      });\r\n\r\n      map.addLayer({\r\n        id: 'route',\r\n        type: 'line',\r\n        source: 'route',\r\n        layout: {\r\n          'line-join': 'round',\r\n          'line-cap': 'round',\r\n        },\r\n        paint: {\r\n          'line-color': '#007bff',\r\n          'line-width': 4,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  // Helper function to parse LINESTRING into coordinates\r\n  const parseLineString = (lineString) => {\r\n    // Remove \"LINESTRING(\" and \")\"\r\n    const coordinateString = lineString.replace('LINESTRING(', '').replace(')', '');\r\n    // Split into coordinate pairs\r\n    const pairs = coordinateString.split(',');\r\n    // Convert pairs into [longitude, latitude] arrays\r\n    return pairs.map((pair) => {\r\n      const [lat, lon] = pair.trim().split(' ');\r\n      return [parseFloat(lon), parseFloat(lat)];\r\n    });\r\n  };\r\n\r\n  // Helper function to calculate the center of a route\r\n  const calculateCenter = (coordinates) => {\r\n    const total = coordinates.reduce(\r\n      (acc, coord) => {\r\n        acc[0] += coord[0]; // Sum of longitudes\r\n        acc[1] += coord[1]; // Sum of latitudes\r\n        return acc;\r\n      },\r\n      [0, 0]\r\n    );\r\n\r\n    return [total[0] / coordinates.length, total[1] / coordinates.length];\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'flex' }}>\r\n      <div style={{ flex: 1, padding: '20px' }}>\r\n        <h1>Admin Truck Schedule</h1>\r\n        <table border=\"1\" style={{ width: '100%', borderCollapse: 'collapse', marginBottom: '20px' }}>\r\n          <thead>\r\n            <tr>\r\n              <th>Truck ID</th>\r\n              <th>Truck Name</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {trucks.length > 0 ? (\r\n              trucks.map((truck) => (\r\n                <React.Fragment key={truck.truck_id}>\r\n                  <tr onClick={() => handleTruckClick(truck)}>\r\n                    <td>{truck.truck_id}</td>\r\n                    <td>{truck.truck_name}</td>\r\n                    <td>\r\n                      <button>\r\n                        {expandedTruckId === truck.truck_id ? 'Hide Details' : 'View Route & Schedule'}\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                  {expandedTruckId === truck.truck_id && (\r\n                    <tr>\r\n                      <td colSpan=\"3\">\r\n                        {routeDetails.length > 0 ? (\r\n                          <table border=\"1\" style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                            <thead>\r\n                              <tr>\r\n                                <th>From</th>\r\n                                <th>To</th>\r\n                                <th>Estimated Arrival Time</th>\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              {routeDetails.map((segment, index) => (\r\n                                <tr key={index}>\r\n                                  <td>{segment.from}</td>\r\n                                  <td>{segment.to}</td>\r\n                                  <td>{new Date(segment.arrival_time).toLocaleString()}</td>\r\n                                </tr>\r\n                              ))}\r\n                            </tbody>\r\n                          </table>\r\n                        ) : (\r\n                          <p>No route schedule available</p>\r\n                        )}\r\n                      </td>\r\n                    </tr>\r\n                  )}\r\n                </React.Fragment>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td colSpan=\"3\" style={{ textAlign: 'center' }}>\r\n                  No trucks available.\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div\r\n        id=\"map\"\r\n        style={{\r\n          flex: 1,\r\n          height: '100vh',\r\n          borderLeft: '1px solid #ccc',\r\n        }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SchedulePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}