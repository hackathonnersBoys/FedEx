{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\suyash\\\\Code\\\\myproject\\\\frontend\\\\src\\\\components\\\\DynamicRouteMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\n\n// Fix for default marker icons in Leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'\n});\nconst DynamicRouteMap = () => {\n  _s();\n  var _routeData$route_deta, _trucks$find, _routeData$route_deta2;\n  const [trucks, setTrucks] = useState([]);\n  const [selectedTruck, setSelectedTruck] = useState('');\n  const [routeData, setRouteData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [map, setMap] = useState(null);\n  const [warehouseData, setWarehouseData] = useState([]);\n  useEffect(() => {\n    fetchTrucks();\n  }, []);\n  useEffect(() => {\n    if (selectedTruck) {\n      fetchGeofencesData(selectedTruck);\n    }\n  }, [selectedTruck]);\n  const transformGeofencesToWarehouseFormat = geofences => {\n    return geofences.map((geofence, index) => {\n      // Split coordinates string into lat and lng\n      const [lat, lng] = geofence.coordinates.split(',').map(coord => parseFloat(coord));\n      return {\n        id: `W${geofence.id}`,\n        name: geofence.name,\n        lat: lat,\n        lng: lng,\n        load: geofence.load,\n        unload: geofence.unload,\n        processingTime: 30 // Default processing time since it's not provided in geofences data\n      };\n    });\n  };\n  const fetchGeofencesData = async truckId => {\n    try {\n      setLoading(true);\n      const response = await fetch(`http://localhost:8000/api/devices/geofences?uniqueId=${truckId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch geofences data');\n      }\n      const data = await response.json();\n      const transformedData = transformGeofencesToWarehouseFormat(data.geofences);\n      setWarehouseData(transformedData);\n\n      // After getting warehouse data, fetch route data\n      await fetchRouteData(truckId, transformedData);\n    } catch (err) {\n      console.error('Error fetching geofences:', err);\n      setError(err.message);\n      setLoading(false);\n    }\n  };\n  const fetchTrucks = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/api/devices', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          key: 'value'\n        })\n      });\n      if (!response.ok) throw new Error('Failed to fetch trucks');\n      const data = await response.json();\n      setTrucks(data || []);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching trucks:', error);\n      setError('Failed to load trucks');\n      setLoading(false);\n    }\n  };\n  const fetchRouteData = async (truckId, warehouses) => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/dynamicRoute?uniqueId=${truckId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(warehouses)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch route data');\n      }\n      const data = await response.json();\n      setRouteData(data);\n      setLoading(false);\n    } catch (err) {\n      setError(err.message);\n      setLoading(false);\n    }\n  };\n  const handleTruckChange = e => {\n    setSelectedTruck(e.target.value);\n  };\n\n  // Define route colors for different segments\n  const routeColors = ['#FF5733',\n  // Orange-red\n  '#33FF57',\n  // Bright green\n  '#3357FF',\n  // Blue\n  '#FF33F6',\n  // Pink\n  '#33FFF6' // Cyan\n  ];\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-full\",\n      children: \"Loading map data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-full text-red-500\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Center the map on the first warehouse if available, otherwise use a default center\n  const center = warehouseData.length > 0 ? [warehouseData[0].lat, warehouseData[0].lng] : [12.9716, 80.2407]; // Default center coordinates\n\n  // Create route lines from the coordinates with different colors\n  const routeLines = routeData === null || routeData === void 0 ? void 0 : (_routeData$route_deta = routeData.route_details) === null || _routeData$route_deta === void 0 ? void 0 : _routeData$route_deta.map((segment, index) => {\n    const segmentCoords = routeData.route_coordinates.filter(point => point.warehouse_id === segment.from_id || point.warehouse_id === segment.to_id).map(point => point.coordinate);\n    return /*#__PURE__*/_jsxDEV(Polyline, {\n      positions: segmentCoords,\n      color: routeColors[index % routeColors.length],\n      weight: 4,\n      opacity: 0.8\n    }, `route-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this);\n  });\n\n  // Custom marker icon\n  const warehouseIcon = new L.Icon({\n    iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n    iconSize: [25, 41],\n    iconAnchor: [12, 41],\n    popupAnchor: [1, -34],\n    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n    shadowSize: [41, 41]\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-screen w-full relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-4 left-4 z-[1000] bg-white p-4 rounded-lg shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedTruck,\n        onChange: handleTruckChange,\n        className: \"w-full p-2 border rounded-md bg-white\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a Truck\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), trucks.map(truck => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: truck.uniqueId,\n          children: [truck.name || `Truck ${truck.uniqueId}`, \" - \", truck.truck_status]\n        }, truck.uniqueId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), selectedTruck && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2 text-sm\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Capacity: \", (_trucks$find = trucks.find(t => t.uniqueId === selectedTruck)) === null || _trucks$find === void 0 ? void 0 : _trucks$find.filled_capacity.toFixed(2), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: center,\n      zoom: 12,\n      className: \"h-full w-full\",\n      whenCreated: setMap,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors \\xA9 <a href=\\\"https://carto.com/attributions\\\">CARTO</a>\",\n        maxZoom: 19\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), warehouseData.map(warehouse => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [warehouse.lat, warehouse.lng],\n        icon: warehouseIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-bold text-lg mb-2\",\n              children: warehouse.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm\",\n              children: [\"Load: \", warehouse.load, \" units\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm\",\n              children: [\"Unload: \", warehouse.unload, \" units\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm\",\n              children: [\"Processing: \", warehouse.processingTime, \" min\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)\n      }, warehouse.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)), routeLines]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute bottom-4 right-4 bg-white p-4 rounded-lg shadow-lg z-[1000]\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"font-bold mb-2\",\n        children: \"Route Legend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), routeData === null || routeData === void 0 ? void 0 : (_routeData$route_deta2 = routeData.route_details) === null || _routeData$route_deta2 === void 0 ? void 0 : _routeData$route_deta2.map((segment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center mb-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-4 h-4 mr-2\",\n          style: {\n            backgroundColor: routeColors[index % routeColors.length]\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm\",\n          children: [segment.from_name, \" \\u2192 \", segment.to_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this)]\n      }, `legend-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_s(DynamicRouteMap, \"juIFTiLgrkZSYKLQ8cbHv+zKmkM=\");\n_c = DynamicRouteMap;\nexport default DynamicRouteMap;\nvar _c;\n$RefreshReg$(_c, \"DynamicRouteMap\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Marker","Popup","Polyline","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","DynamicRouteMap","_s","_routeData$route_deta","_trucks$find","_routeData$route_deta2","trucks","setTrucks","selectedTruck","setSelectedTruck","routeData","setRouteData","loading","setLoading","error","setError","map","setMap","warehouseData","setWarehouseData","fetchTrucks","fetchGeofencesData","transformGeofencesToWarehouseFormat","geofences","geofence","index","lat","lng","coordinates","split","coord","parseFloat","id","name","load","unload","processingTime","truckId","response","fetch","ok","Error","data","json","transformedData","fetchRouteData","err","console","message","method","headers","body","JSON","stringify","key","warehouses","handleTruckChange","e","target","value","routeColors","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","length","routeLines","route_details","segment","segmentCoords","route_coordinates","filter","point","warehouse_id","from_id","to_id","coordinate","positions","color","weight","opacity","warehouseIcon","iconSize","iconAnchor","popupAnchor","shadowSize","onChange","truck","uniqueId","truck_status","find","t","filled_capacity","toFixed","zoom","whenCreated","url","attribution","maxZoom","warehouse","position","icon","style","backgroundColor","from_name","to_name","_c","$RefreshReg$"],"sources":["C:/Users/suyash/Code/myproject/frontend/src/components/DynamicRouteMap.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\n\r\n// Fix for default marker icons in Leaflet\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\r\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\r\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\r\n});\r\n\r\n\r\n\r\nconst DynamicRouteMap = () => {\r\n  const [trucks, setTrucks] = useState([]);\r\n  const [selectedTruck, setSelectedTruck] = useState('');\r\n  const [routeData, setRouteData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [map, setMap] = useState(null);\r\n  const [warehouseData, setWarehouseData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTrucks();    \r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedTruck) {\r\n      fetchGeofencesData(selectedTruck);\r\n    }\r\n  }, [selectedTruck]);\r\n\r\n  const transformGeofencesToWarehouseFormat = (geofences) => {\r\n    return geofences.map((geofence, index) => {\r\n      // Split coordinates string into lat and lng\r\n      const [lat, lng] = geofence.coordinates.split(',').map(coord => parseFloat(coord));\r\n      \r\n      return {\r\n        id: `W${geofence.id}`,\r\n        name: geofence.name,\r\n        lat: lat,\r\n        lng: lng,\r\n        load: geofence.load,\r\n        unload: geofence.unload,\r\n        processingTime: 30 // Default processing time since it's not provided in geofences data\r\n      };\r\n    });\r\n  };\r\n\r\n  const fetchGeofencesData = async (truckId) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(`http://localhost:8000/api/devices/geofences?uniqueId=${truckId}`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch geofences data');\r\n      }\r\n\r\n      const data = await response.json();\r\n      const transformedData = transformGeofencesToWarehouseFormat(data.geofences);\r\n      setWarehouseData(transformedData);\r\n\r\n      // After getting warehouse data, fetch route data\r\n      await fetchRouteData(truckId, transformedData);\r\n    } catch (err) {\r\n      console.error('Error fetching geofences:', err);\r\n      setError(err.message);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchTrucks = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:8000/api/devices', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ key: 'value' })\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Failed to fetch trucks');\r\n      \r\n      const data = await response.json();\r\n      setTrucks(data || []);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching trucks:', error);\r\n      setError('Failed to load trucks');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchRouteData = async (truckId, warehouses) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/api/dynamicRoute?uniqueId=${truckId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(warehouses),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch route data');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setRouteData(data);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleTruckChange = (e) => {\r\n    setSelectedTruck(e.target.value);\r\n  };\r\n\r\n  \r\n  // Define route colors for different segments\r\n  const routeColors = [\r\n    '#FF5733', // Orange-red\r\n    '#33FF57', // Bright green\r\n    '#3357FF', // Blue\r\n    '#FF33F6', // Pink\r\n    '#33FFF6'  // Cyan\r\n  ];\r\n\r\n  if (loading) {\r\n    return <div className=\"flex items-center justify-center h-full\">Loading map data...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"flex items-center justify-center h-full text-red-500\">Error: {error}</div>;\r\n  }\r\n\r\n  // Center the map on the first warehouse if available, otherwise use a default center\r\n  const center = warehouseData.length > 0 \r\n    ? [warehouseData[0].lat, warehouseData[0].lng]\r\n    : [12.9716, 80.2407]; // Default center coordinates\r\n\r\n  // Create route lines from the coordinates with different colors\r\n  const routeLines = routeData?.route_details?.map((segment, index) => {\r\n    const segmentCoords = routeData.route_coordinates\r\n      .filter(point => \r\n        (point.warehouse_id === segment.from_id || point.warehouse_id === segment.to_id))\r\n      .map(point => point.coordinate);\r\n    \r\n    return (\r\n      <Polyline\r\n        key={`route-${index}`}\r\n        positions={segmentCoords}\r\n        color={routeColors[index % routeColors.length]}\r\n        weight={4}\r\n        opacity={0.8}\r\n      />\r\n    );\r\n  });\r\n\r\n  // Custom marker icon\r\n  const warehouseIcon = new L.Icon({\r\n    iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\r\n    iconSize: [25, 41],\r\n    iconAnchor: [12, 41],\r\n    popupAnchor: [1, -34],\r\n    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\r\n    shadowSize: [41, 41]\r\n  });\r\n\r\n  return (\r\n    <div className=\"h-screen w-full relative\">\r\n      {/* Truck Selection Dropdown */}\r\n      <div className=\"absolute top-4 left-4 z-[1000] bg-white p-4 rounded-lg shadow-lg\">\r\n        <select \r\n          value={selectedTruck}\r\n          onChange={handleTruckChange}\r\n          className=\"w-full p-2 border rounded-md bg-white\"\r\n        >\r\n          <option value=\"\">Select a Truck</option>\r\n          {trucks.map((truck) => (\r\n            <option key={truck.uniqueId} value={truck.uniqueId}>\r\n              {truck.name || `Truck ${truck.uniqueId}`} - {truck.truck_status}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        {selectedTruck && (\r\n          <div className=\"mt-2 text-sm\">\r\n            <p></p>\r\n            <p>Capacity: {trucks.find(t => t.uniqueId === selectedTruck)?.filled_capacity.toFixed(2)}%</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <MapContainer\r\n        center={center}\r\n        zoom={12}\r\n        className=\"h-full w-full\"\r\n        whenCreated={setMap}\r\n      >\r\n        <TileLayer\r\n          url=\"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png\"\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>'\r\n          maxZoom={19}\r\n        />\r\n        \r\n        {/* Render warehouse markers */}\r\n        {warehouseData.map((warehouse) => (\r\n          <Marker\r\n            key={warehouse.id}\r\n            position={[warehouse.lat, warehouse.lng]}\r\n            icon={warehouseIcon}\r\n          >\r\n            <Popup>\r\n              <div className=\"p-2\">\r\n                <h3 className=\"font-bold text-lg mb-2\">{warehouse.name}</h3>\r\n                <p className=\"text-sm\">Load: {warehouse.load} units</p>\r\n                <p className=\"text-sm\">Unload: {warehouse.unload} units</p>\r\n                <p className=\"text-sm\">Processing: {warehouse.processingTime} min</p>\r\n              </div>\r\n            </Popup>\r\n          </Marker>\r\n        ))}\r\n\r\n        {/* Render route lines */}\r\n        {routeLines}\r\n      </MapContainer>\r\n\r\n      {/* Legend */}\r\n      <div className=\"absolute bottom-4 right-4 bg-white p-4 rounded-lg shadow-lg z-[1000]\">\r\n        <h4 className=\"font-bold mb-2\">Route Legend</h4>\r\n        {routeData?.route_details?.map((segment, index) => (\r\n          <div key={`legend-${index}`} className=\"flex items-center mb-1\">\r\n            <div \r\n              className=\"w-4 h-4 mr-2\" \r\n              style={{ backgroundColor: routeColors[index % routeColors.length] }}\r\n            ></div>\r\n            <span className=\"text-sm\">\r\n              {segment.from_name} → {segment.to_name}\r\n            </span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DynamicRouteMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}