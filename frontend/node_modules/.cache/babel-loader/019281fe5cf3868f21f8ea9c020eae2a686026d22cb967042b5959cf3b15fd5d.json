{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\suyash\\\\Code\\\\myproject\\\\frontend\\\\src\\\\components\\\\AddWarehouse.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport maplibregl from 'maplibre-gl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddWarehouse = () => {\n  _s();\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [currentPopup, setCurrentPopup] = useState(null);\n  const [warehouses, setWarehouses] = useState([]);\n  useEffect(() => {\n    if (mapContainer.current && !map.current) {\n      map.current = new maplibregl.Map({\n        container: mapContainer.current,\n        style: 'https://basemaps.cartocdn.com/gl/voyager-gl-style/style.json',\n        center: [78.5, 10.5],\n        // Longitude, Latitude\n        zoom: 5\n      });\n      map.current.on('click', e => {\n        const {\n          lng,\n          lat\n        } = e.lngLat;\n        showCreateWarehousePopup(lng, lat);\n      });\n      fetchGeofences(); // Fetch existing geofences\n\n      return () => {\n        if (map.current) {\n          map.current.remove();\n          map.current = null;\n        }\n      };\n    }\n  }, []);\n  const fetchGeofences = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/api/geofences', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        console.error('Failed to fetch geofences:', response.status, response.statusText);\n        return;\n      }\n      const data = await response.json();\n      data.forEach(geofence => {\n        if (geofence.area.startsWith('POLYGON')) {\n          displayGeofenceOnMap(geofence);\n        }\n      });\n    } catch (error) {\n      console.error('Error fetching geofences:', error);\n    }\n  };\n  const showCreateWarehousePopup = (lng, lat) => {\n    if (currentPopup) currentPopup.remove();\n    const popupContent = document.createElement('div');\n    popupContent.innerHTML = `\n      <div>\n        <p>Create a warehouse at:</p>\n        <p><strong>${lng.toFixed(4)}, ${lat.toFixed(4)}</strong></p>\n        <button id=\"createWarehouseBtn\" class=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 mt-2\">\n          Create Warehouse\n        </button>\n      </div>\n    `;\n    setTimeout(() => {\n      const button = document.getElementById('createWarehouseBtn');\n      if (button) {\n        button.addEventListener('click', () => handleAddWarehouse(lng, lat));\n      }\n    }, 0);\n    const popup = new maplibregl.Popup({\n      offset: 25\n    }).setLngLat([lng, lat]).setDOMContent(popupContent).addTo(map.current);\n    setCurrentPopup(popup);\n  };\n  const handleAddWarehouse = async (lng, lat) => {\n    const newWarehouse = {\n      id: warehouses.length + 1,\n      lng,\n      lat\n    };\n    setWarehouses([...warehouses, newWarehouse]);\n    addWarehouseMarker(lng, lat, newWarehouse.id);\n    if (currentPopup) {\n      currentPopup.remove();\n      setCurrentPopup(null);\n    }\n    await createGeofence(newWarehouse.id, lng, lat);\n  };\n  const createGeofence = async (warehouseId, lng, lat) => {\n    const delta = 0.0003; // Size of the rectangle (approximately 200m)\n\n    const rectangleCoordinates = [[lat + delta, lng - delta], [lat + delta, lng + delta], [lat - delta, lng + delta], [lat - delta, lng - delta], [lat + delta, lng - delta] // Close the loop\n    ];\n    const geofenceData = {\n      name: `Warehouse ${warehouseId}`,\n      description: `Geofence for Warehouse ${warehouseId}`,\n      area: `POLYGON((${rectangleCoordinates.map(coord => coord.join(' ')).join(', ')}))`\n    };\n    try {\n      const response = await fetch('http://localhost:3000/api/geofences', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(geofenceData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create geofence');\n      }\n      const data = await response.json();\n      displayGeofenceOnMap(data);\n      alert(`Geofence created for Warehouse ${warehouseId}`);\n    } catch (error) {\n      console.error('Error creating geofence:', error);\n      alert('Failed to create geofence. Please try again.');\n    }\n  };\n  const addWarehouseMarker = (lng, lat, id) => {\n    new maplibregl.Marker({\n      color: '#007bff'\n    }).setLngLat([lng, lat]).setPopup(new maplibregl.Popup({\n      offset: 25\n    }).setHTML(`\n          <div>\n            <p><strong>Warehouse ID:</strong> ${id}</p>\n            <p><strong>Location:</strong> ${lng.toFixed(4)}, ${lat.toFixed(4)}</p>\n          </div>\n        `)).addTo(map.current);\n  };\n  const displayGeofenceOnMap = geofence => {\n    const match = /POLYGON\\(\\(\\s*([^)]+)\\s*\\)\\)/.exec(geofence.area);\n    if (!match) {\n      console.warn('Could not parse geofence area:', geofence.area);\n      return;\n    }\n    const coordinates = match[1].split(', ').map(coord => coord.split(' ').map(Number)).map(coord => [coord[1], coord[0]]);\n    const sourceId = `geofence-${geofence.id}`;\n    if (!map.current.getSource(sourceId)) {\n      map.current.addSource(sourceId, {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: [{\n            type: 'Feature',\n            geometry: {\n              type: 'Polygon',\n              coordinates: [coordinates]\n            }\n          }]\n        }\n      });\n      map.current.addLayer({\n        id: `geofence-layer-${geofence.id}`,\n        type: 'fill',\n        source: sourceId,\n        paint: {\n          'fill-color': '#ff0000',\n          'fill-opacity': 0.3\n        }\n      });\n      map.current.addLayer({\n        id: `geofence-outline-${geofence.id}`,\n        type: 'line',\n        source: sourceId,\n        paint: {\n          'line-color': '#ff0000',\n          'line-width': 2\n        }\n      });\n      new maplibregl.Marker({\n        color: '#ff0000'\n      }).setLngLat([coordinates[0][0], coordinates[0][1]]) // Use [longitude, latitude]\n      .setPopup(new maplibregl.Popup({\n        offset: 25\n      }).setHTML(`\n            <div>\n              <p><strong>Geofence ID:</strong> ${geofence.id}</p>\n              <p><strong>Name:</strong> ${geofence.name}</p>\n              <p><strong>Description:</strong> ${geofence.description}</p>\n            </div>\n          `)).addTo(map.current);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        position: 'absolute',\n        zIndex: 1000,\n        margin: '10px'\n      },\n      children: \"Add Warehouse\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainer,\n      style: {\n        position: 'absolute',\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        position: 'absolute',\n        top: '20px',\n        right: '20px',\n        zIndex: 1000,\n        backgroundColor: '#007bff',\n        color: '#fff',\n        border: 'none',\n        padding: '10px 20px',\n        borderRadius: '5px',\n        cursor: 'pointer'\n      },\n      onClick: () => {\n        if (map.current) {\n          map.current.easeTo({\n            zoom: 5,\n            center: [78.9629, 20.5937],\n            duration: 1000\n          });\n        }\n      },\n      children: \"Reset View\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n};\n_s(AddWarehouse, \"is7ZzcuvaFQG8L6am+QYEkHmnLg=\");\n_c = AddWarehouse;\nexport default AddWarehouse;\nvar _c;\n$RefreshReg$(_c, \"AddWarehouse\");","map":{"version":3,"names":["React","useEffect","useRef","useState","maplibregl","jsxDEV","_jsxDEV","AddWarehouse","_s","mapContainer","map","currentPopup","setCurrentPopup","warehouses","setWarehouses","current","Map","container","style","center","zoom","on","e","lng","lat","lngLat","showCreateWarehousePopup","fetchGeofences","remove","response","fetch","method","headers","ok","console","error","status","statusText","data","json","forEach","geofence","area","startsWith","displayGeofenceOnMap","popupContent","document","createElement","innerHTML","toFixed","setTimeout","button","getElementById","addEventListener","handleAddWarehouse","popup","Popup","offset","setLngLat","setDOMContent","addTo","newWarehouse","id","length","addWarehouseMarker","createGeofence","warehouseId","delta","rectangleCoordinates","geofenceData","name","description","coord","join","body","JSON","stringify","Error","alert","Marker","color","setPopup","setHTML","match","exec","warn","coordinates","split","Number","sourceId","getSource","addSource","type","features","geometry","addLayer","source","paint","height","position","children","zIndex","margin","fileName","_jsxFileName","lineNumber","columnNumber","ref","top","bottom","left","right","backgroundColor","border","padding","borderRadius","cursor","onClick","easeTo","duration","_c","$RefreshReg$"],"sources":["C:/Users/suyash/Code/myproject/frontend/src/components/AddWarehouse.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport maplibregl from 'maplibre-gl';\r\n\r\nconst AddWarehouse = () => {\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const [currentPopup, setCurrentPopup] = useState(null);\r\n  const [warehouses, setWarehouses] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (mapContainer.current && !map.current) {\r\n      map.current = new maplibregl.Map({\r\n        container: mapContainer.current,\r\n        style: 'https://basemaps.cartocdn.com/gl/voyager-gl-style/style.json',\r\n        center: [78.5, 10.5], // Longitude, Latitude\r\n        zoom: 5,\r\n      });\r\n\r\n      map.current.on('click', (e) => {\r\n        const { lng, lat } = e.lngLat;\r\n        showCreateWarehousePopup(lng, lat);\r\n      });\r\n\r\n      fetchGeofences(); // Fetch existing geofences\r\n\r\n      return () => {\r\n        if (map.current) {\r\n          map.current.remove();\r\n          map.current = null;\r\n        }\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  const fetchGeofences = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3000/api/geofences', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error('Failed to fetch geofences:', response.status, response.statusText);\r\n        return;\r\n      }\r\n\r\n      const data = await response.json();\r\n      data.forEach((geofence) => {\r\n        if (geofence.area.startsWith('POLYGON')) {\r\n          displayGeofenceOnMap(geofence);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching geofences:', error);\r\n    }\r\n  };\r\n\r\n  const showCreateWarehousePopup = (lng, lat) => {\r\n    if (currentPopup) currentPopup.remove();\r\n\r\n    const popupContent = document.createElement('div');\r\n    popupContent.innerHTML = `\r\n      <div>\r\n        <p>Create a warehouse at:</p>\r\n        <p><strong>${lng.toFixed(4)}, ${lat.toFixed(4)}</strong></p>\r\n        <button id=\"createWarehouseBtn\" class=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 mt-2\">\r\n          Create Warehouse\r\n        </button>\r\n      </div>\r\n    `;\r\n\r\n    setTimeout(() => {\r\n      const button = document.getElementById('createWarehouseBtn');\r\n      if (button) {\r\n        button.addEventListener('click', () => handleAddWarehouse(lng, lat));\r\n      }\r\n    }, 0);\r\n\r\n    const popup = new maplibregl.Popup({ offset: 25 })\r\n      .setLngLat([lng, lat])\r\n      .setDOMContent(popupContent)\r\n      .addTo(map.current);\r\n\r\n    setCurrentPopup(popup);\r\n  };\r\n\r\n  const handleAddWarehouse = async (lng, lat) => {\r\n    const newWarehouse = {\r\n      id: warehouses.length + 1,\r\n      lng,\r\n      lat,\r\n    };\r\n\r\n    setWarehouses([...warehouses, newWarehouse]);\r\n    addWarehouseMarker(lng, lat, newWarehouse.id);\r\n\r\n    if (currentPopup) {\r\n      currentPopup.remove();\r\n      setCurrentPopup(null);\r\n    }\r\n\r\n    await createGeofence(newWarehouse.id, lng, lat);\r\n  };\r\n\r\n  const createGeofence = async (warehouseId, lng, lat) => {\r\n    const delta = 0.0003; // Size of the rectangle (approximately 200m)\r\n\r\n    const rectangleCoordinates = [\r\n      [lat + delta, lng - delta],\r\n      [lat + delta, lng + delta],\r\n      [lat - delta, lng + delta],\r\n      [lat - delta, lng - delta],\r\n      [lat + delta, lng - delta], // Close the loop\r\n    ];\r\n\r\n    const geofenceData = {\r\n      name: `Warehouse ${warehouseId}`,\r\n      description: `Geofence for Warehouse ${warehouseId}`,\r\n      area: `POLYGON((${rectangleCoordinates.map((coord) => coord.join(' ')).join(', ')}))`,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3000/api/geofences', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(geofenceData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to create geofence');\r\n      }\r\n\r\n      const data = await response.json();\r\n      displayGeofenceOnMap(data);\r\n      alert(`Geofence created for Warehouse ${warehouseId}`);\r\n    } catch (error) {\r\n      console.error('Error creating geofence:', error);\r\n      alert('Failed to create geofence. Please try again.');\r\n    }\r\n  };\r\n\r\n  const addWarehouseMarker = (lng, lat, id) => {\r\n    new maplibregl.Marker({ color: '#007bff' })\r\n      .setLngLat([lng, lat])\r\n      .setPopup(\r\n        new maplibregl.Popup({ offset: 25 }).setHTML(`\r\n          <div>\r\n            <p><strong>Warehouse ID:</strong> ${id}</p>\r\n            <p><strong>Location:</strong> ${lng.toFixed(4)}, ${lat.toFixed(4)}</p>\r\n          </div>\r\n        `)\r\n      )\r\n      .addTo(map.current);\r\n  };\r\n\r\n  const displayGeofenceOnMap = (geofence) => {\r\n    const match = /POLYGON\\(\\(\\s*([^)]+)\\s*\\)\\)/.exec(geofence.area);\r\n    if (!match) {\r\n      console.warn('Could not parse geofence area:', geofence.area);\r\n      return;\r\n    }\r\n\r\n    const coordinates = match[1]\r\n      .split(', ')\r\n      .map((coord) => coord.split(' ').map(Number))\r\n      .map((coord) => [coord[1], coord[0]]);\r\n\r\n    const sourceId = `geofence-${geofence.id}`;\r\n\r\n    if (!map.current.getSource(sourceId)) {\r\n      map.current.addSource(sourceId, {\r\n        type: 'geojson',\r\n        data: {\r\n          type: 'FeatureCollection',\r\n          features: [\r\n            {\r\n              type: 'Feature',\r\n              geometry: {\r\n                type: 'Polygon',\r\n                coordinates: [coordinates],\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      });\r\n\r\n      map.current.addLayer({\r\n        id: `geofence-layer-${geofence.id}`,\r\n        type: 'fill',\r\n        source: sourceId,\r\n        paint: {\r\n          'fill-color': '#ff0000',\r\n          'fill-opacity': 0.3,\r\n        },\r\n      });\r\n\r\n      map.current.addLayer({\r\n        id: `geofence-outline-${geofence.id}`,\r\n        type: 'line',\r\n        source: sourceId,\r\n        paint: {\r\n          'line-color': '#ff0000',\r\n          'line-width': 2,\r\n        },\r\n      });\r\n      \r\n      new maplibregl.Marker({ color: '#ff0000' })\r\n        .setLngLat([coordinates[0][0], coordinates[0][1]]) // Use [longitude, latitude]\r\n        .setPopup(\r\n          new maplibregl.Popup({ offset: 25 }).setHTML(`\r\n            <div>\r\n              <p><strong>Geofence ID:</strong> ${geofence.id}</p>\r\n              <p><strong>Name:</strong> ${geofence.name}</p>\r\n              <p><strong>Description:</strong> ${geofence.description}</p>\r\n            </div>\r\n          `)\r\n        )\r\n        .addTo(map.current);\r\n        \r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: '100vh', position: 'relative' }}>\r\n      <h1 style={{ position: 'absolute', zIndex: 1000, margin: '10px' }}>Add Warehouse</h1>\r\n      <div\r\n        ref={mapContainer}\r\n        style={{ position: 'absolute', top: 0, bottom: 0, left: 0, right: 0 }}\r\n      />\r\n      <button\r\n        style={{\r\n          position: 'absolute',\r\n          top: '20px',\r\n          right: '20px',\r\n          zIndex: 1000,\r\n          backgroundColor: '#007bff',\r\n          color: '#fff',\r\n          border: 'none',\r\n          padding: '10px 20px',\r\n          borderRadius: '5px',\r\n          cursor: 'pointer',\r\n        }}\r\n        onClick={() => {\r\n          if (map.current) {\r\n            map.current.easeTo({\r\n              zoom: 5,\r\n              center: [78.9629, 20.5937],\r\n              duration: 1000,\r\n            });\r\n          }\r\n        }}\r\n      >\r\n        Reset View\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddWarehouse;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}