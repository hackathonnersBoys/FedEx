{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\suyash\\\\Code\\\\myproject\\\\frontend\\\\src\\\\components\\\\AddWarehouse.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport maplibregl from 'maplibre-gl';\nimport 'maplibre-gl/dist/maplibre-gl.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddWarehouse = () => {\n  _s();\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [currentPopup, setCurrentPopup] = useState(null);\n  const [warehouses, setWarehouses] = useState([]);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  useEffect(() => {\n    if (!map.current && mapContainer.current) {\n      try {\n        const newMap = new maplibregl.Map({\n          container: mapContainer.current,\n          style: 'https://api.maptiler.com/maps/basic/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n          center: [73.8567, 18.5204],\n          // Pune coordinates\n          zoom: 12\n        });\n        newMap.on('load', () => {\n          console.log('Map loaded successfully');\n          setMapLoaded(true);\n        });\n        newMap.on('error', e => {\n          console.error('Map error:', e);\n        });\n        newMap.on('click', e => {\n          const {\n            lng,\n            lat\n          } = e.lngLat;\n          showCreateWarehousePopup(lng, lat);\n        });\n        map.current = newMap;\n        return () => {\n          map.current.remove();\n          map.current = null;\n        };\n      } catch (error) {\n        console.error('Error initializing map:', error);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    if (mapLoaded) {\n      fetchGeofences();\n    }\n  }, [mapLoaded]);\n  const fetchGeofences = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/api/geofences', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        console.error('Failed to fetch geofences:', response.status, response.statusText);\n        return;\n      }\n      const data = await response.json();\n      console.log('Fetched geofences:', data);\n      data.forEach(geofence => {\n        var _geofence$area;\n        if ((_geofence$area = geofence.area) !== null && _geofence$area !== void 0 && _geofence$area.startsWith('POLYGON')) {\n          displayGeofenceOnMap(geofence);\n        }\n      });\n    } catch (error) {\n      console.error('Error fetching geofences:', error);\n    }\n  };\n  const showCreateWarehousePopup = (lng, lat) => {\n    if (currentPopup) currentPopup.remove();\n    const popupContent = document.createElement('div');\n    popupContent.className = 'p-4';\n    popupContent.innerHTML = `\n      <div class=\"space-y-4\">\n        <p class=\"font-medium\">Create a warehouse at:</p>\n        <p class=\"text-gray-600\"><strong>${lng.toFixed(4)}, ${lat.toFixed(4)}</strong></p>\n        \n        <div class=\"space-y-2\">\n          <label class=\"block text-sm font-medium text-gray-700\">Warehouse Name:</label>\n          <input \n            type=\"text\" \n            id=\"warehouseName\"\n            class=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n            placeholder=\"Enter warehouse name\"\n            required\n          />\n        </div>\n\n        <div class=\"space-y-2\">\n          <label class=\"block text-sm font-medium text-gray-700\">Load Time (minutes):</label>\n          <input \n            type=\"number\" \n            id=\"loadTime\"\n            class=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n            min=\"0\"\n            required\n          />\n        </div>\n\n        <div class=\"space-y-2\">\n          <label class=\"block text-sm font-medium text-gray-700\">Unload Time (minutes):</label>\n          <input \n            type=\"number\" \n            id=\"unloadTime\"\n            class=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n            min=\"0\"\n            required\n          />\n        </div>\n\n        <button \n          id=\"createWarehouseBtn\" \n          class=\"w-full bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors\"\n        >\n          Create Warehouse\n        </button>\n      </div>\n    `;\n    setTimeout(() => {\n      const button = document.getElementById('createWarehouseBtn');\n      if (button) {\n        button.addEventListener('click', () => {\n          const nameInput = document.getElementById('warehouseName');\n          const loadTimeInput = document.getElementById('loadTime');\n          const unloadTimeInput = document.getElementById('unloadTime');\n          if (!nameInput.value || !loadTimeInput.value || !unloadTimeInput.value) {\n            alert('Please fill in all fields');\n            return;\n          }\n          handleAddWarehouse(lng, lat, {\n            name: nameInput.value,\n            loadTime: parseInt(loadTimeInput.value),\n            unloadTime: parseInt(unloadTimeInput.value)\n          });\n        });\n      }\n    }, 0);\n    const popup = new maplibregl.Popup({\n      offset: 25\n    }).setLngLat([lng, lat]).setDOMContent(popupContent).addTo(map.current);\n    setCurrentPopup(popup);\n  };\n  const handleAddWarehouse = async (lng, lat, warehouseDetails) => {\n    const newWarehouse = {\n      id: warehouses.length + 1,\n      lng,\n      lat,\n      ...warehouseDetails\n    };\n    setWarehouses([...warehouses, newWarehouse]);\n    addWarehouseMarker(lng, lat, newWarehouse);\n    if (currentPopup) {\n      currentPopup.remove();\n      setCurrentPopup(null);\n    }\n    await createGeofence(newWarehouse);\n  };\n  const createGeofence = async warehouse => {\n    const delta = 0.0003;\n    const rectangleCoordinates = [[warehouse.lat + delta, warehouse.lng - delta], [warehouse.lat + delta, warehouse.lng + delta], [warehouse.lat - delta, warehouse.lng + delta], [warehouse.lat - delta, warehouse.lng - delta], [warehouse.lat + delta, warehouse.lng - delta]];\n    const geofenceData = {\n      name: warehouse.name,\n      description: `Load Time: ${warehouse.loadTime}min, Unload Time: ${warehouse.unloadTime}min`,\n      area: `POLYGON((${rectangleCoordinates.map(coord => coord.join(' ')).join(', ')}))`,\n      loadTime: warehouse.loadTime,\n      unloadTime: warehouse.unloadTime\n    };\n    try {\n      const response = await fetch('http://localhost:8000/api/geofences', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(geofenceData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create geofence');\n      }\n      const data = await response.json();\n      displayGeofenceOnMap(data);\n      alert(`Warehouse \"${warehouse.name}\" created successfully!`);\n    } catch (error) {\n      console.error('Error creating geofence:', error);\n      alert('Failed to create warehouse. Please try again.');\n    }\n  };\n  const addWarehouseMarker = (lng, lat, warehouse) => {\n    new maplibregl.Marker({\n      color: '#007bff'\n    }).setLngLat([lng, lat]).setPopup(new maplibregl.Popup({\n      offset: 25\n    }).setHTML(`\n          <div class=\"p-3\">\n            <h3 class=\"font-bold mb-2\">${warehouse.name}</h3>\n            <p><strong>Location:</strong> ${lng.toFixed(4)}, ${lat.toFixed(4)}</p>\n            <p><strong>Load Time:</strong> ${warehouse.loadTime} minutes</p>\n            <p><strong>Unload Time:</strong> ${warehouse.unloadTime} minutes</p>\n          </div>\n        `)).addTo(map.current);\n  };\n  const displayGeofenceOnMap = geofence => {\n    if (!map.current || !geofence.area) {\n      console.warn('Map not initialized or invalid geofence:', geofence);\n      return;\n    }\n    const match = /POLYGON\\(\\(\\s*([^)]+)\\s*\\)\\)/.exec(geofence.area);\n    if (!match) {\n      console.warn('Could not parse geofence area:', geofence.area);\n      return;\n    }\n    const coordinates = match[1].split(', ').map(coord => coord.split(' ').map(Number)).map(coord => [coord[1], coord[0]]);\n    const sourceId = `geofence-${geofence.id}`;\n    try {\n      if (!map.current.getSource(sourceId)) {\n        map.current.addSource(sourceId, {\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: [{\n              type: 'Feature',\n              geometry: {\n                type: 'Polygon',\n                coordinates: [coordinates]\n              }\n            }]\n          }\n        });\n        map.current.addLayer({\n          id: `geofence-layer-${geofence.id}`,\n          type: 'fill',\n          source: sourceId,\n          paint: {\n            'fill-color': '#ff0000',\n            'fill-opacity': 0.3\n          }\n        });\n        map.current.addLayer({\n          id: `geofence-outline-${geofence.id}`,\n          type: 'line',\n          source: sourceId,\n          paint: {\n            'line-color': '#ff0000',\n            'line-width': 2\n          }\n        });\n        new maplibregl.Marker({\n          color: '#ff0000'\n        }).setLngLat([coordinates[0][0], coordinates[0][1]]).setPopup(new maplibregl.Popup({\n          offset: 25\n        }).setHTML(`\n              <div class=\"p-3\">\n                <h3 class=\"font-bold mb-2\">${geofence.name}</h3>\n                <p>${geofence.description}</p>\n              </div>\n            `)).addTo(map.current);\n      }\n    } catch (error) {\n      console.error('Error displaying geofence:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-screen relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0\",\n      ref: mapContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-4 left-4 z-10 bg-white p-4 rounded-lg shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl font-bold mb-2\",\n        children: \"Add Warehouse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-600\",\n        children: \"Click on the map to add a warehouse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"absolute top-4 right-4 z-10 bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg hover:bg-blue-600 transition-colors\",\n      onClick: () => {\n        if (map.current) {\n          map.current.easeTo({\n            zoom: 12,\n            center: [73.8567, 18.5204],\n            duration: 1000\n          });\n        }\n      },\n      children: \"Reset View\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 5\n  }, this);\n};\n_s(AddWarehouse, \"Y1yfYIiFHguhT7CS4V765SnZ180=\");\n_c = AddWarehouse;\nexport default AddWarehouse;\nvar _c;\n$RefreshReg$(_c, \"AddWarehouse\");","map":{"version":3,"names":["React","useEffect","useRef","useState","maplibregl","jsxDEV","_jsxDEV","AddWarehouse","_s","mapContainer","map","currentPopup","setCurrentPopup","warehouses","setWarehouses","mapLoaded","setMapLoaded","current","newMap","Map","container","style","center","zoom","on","console","log","e","error","lng","lat","lngLat","showCreateWarehousePopup","remove","fetchGeofences","response","fetch","method","headers","ok","status","statusText","data","json","forEach","geofence","_geofence$area","area","startsWith","displayGeofenceOnMap","popupContent","document","createElement","className","innerHTML","toFixed","setTimeout","button","getElementById","addEventListener","nameInput","loadTimeInput","unloadTimeInput","value","alert","handleAddWarehouse","name","loadTime","parseInt","unloadTime","popup","Popup","offset","setLngLat","setDOMContent","addTo","warehouseDetails","newWarehouse","id","length","addWarehouseMarker","createGeofence","warehouse","delta","rectangleCoordinates","geofenceData","description","coord","join","body","JSON","stringify","Error","Marker","color","setPopup","setHTML","warn","match","exec","coordinates","split","Number","sourceId","getSource","addSource","type","features","geometry","addLayer","source","paint","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","easeTo","duration","_c","$RefreshReg$"],"sources":["C:/Users/suyash/Code/myproject/frontend/src/components/AddWarehouse.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport maplibregl from 'maplibre-gl';\r\nimport 'maplibre-gl/dist/maplibre-gl.css';\r\n\r\nconst AddWarehouse = () => {\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const [currentPopup, setCurrentPopup] = useState(null);\r\n  const [warehouses, setWarehouses] = useState([]);\r\n  const [mapLoaded, setMapLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!map.current && mapContainer.current) {\r\n      try {\r\n        const newMap = new maplibregl.Map({\r\n          container: mapContainer.current,\r\n          style: 'https://api.maptiler.com/maps/basic/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\r\n          center: [73.8567, 18.5204], // Pune coordinates\r\n          zoom: 12\r\n        });\r\n\r\n        newMap.on('load', () => {\r\n          console.log('Map loaded successfully');\r\n          setMapLoaded(true);\r\n        });\r\n\r\n        newMap.on('error', (e) => {\r\n          console.error('Map error:', e);\r\n        });\r\n\r\n        newMap.on('click', (e) => {\r\n          const { lng, lat } = e.lngLat;\r\n          showCreateWarehousePopup(lng, lat);\r\n        });\r\n\r\n        map.current = newMap;\r\n\r\n        return () => {\r\n          map.current.remove();\r\n          map.current = null;\r\n        };\r\n      } catch (error) {\r\n        console.error('Error initializing map:', error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (mapLoaded) {\r\n      fetchGeofences();\r\n    }\r\n  }, [mapLoaded]);\r\n\r\n  const fetchGeofences = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:8000/api/geofences', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error('Failed to fetch geofences:', response.status, response.statusText);\r\n        return;\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Fetched geofences:', data);\r\n      data.forEach((geofence) => {\r\n        if (geofence.area?.startsWith('POLYGON')) {\r\n          displayGeofenceOnMap(geofence);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching geofences:', error);\r\n    }\r\n  };\r\n\r\n  const showCreateWarehousePopup = (lng, lat) => {\r\n    if (currentPopup) currentPopup.remove();\r\n\r\n    const popupContent = document.createElement('div');\r\n    popupContent.className = 'p-4';\r\n    popupContent.innerHTML = `\r\n      <div class=\"space-y-4\">\r\n        <p class=\"font-medium\">Create a warehouse at:</p>\r\n        <p class=\"text-gray-600\"><strong>${lng.toFixed(4)}, ${lat.toFixed(4)}</strong></p>\r\n        \r\n        <div class=\"space-y-2\">\r\n          <label class=\"block text-sm font-medium text-gray-700\">Warehouse Name:</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"warehouseName\"\r\n            class=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\r\n            placeholder=\"Enter warehouse name\"\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <div class=\"space-y-2\">\r\n          <label class=\"block text-sm font-medium text-gray-700\">Load Time (minutes):</label>\r\n          <input \r\n            type=\"number\" \r\n            id=\"loadTime\"\r\n            class=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\r\n            min=\"0\"\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <div class=\"space-y-2\">\r\n          <label class=\"block text-sm font-medium text-gray-700\">Unload Time (minutes):</label>\r\n          <input \r\n            type=\"number\" \r\n            id=\"unloadTime\"\r\n            class=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\r\n            min=\"0\"\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <button \r\n          id=\"createWarehouseBtn\" \r\n          class=\"w-full bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors\"\r\n        >\r\n          Create Warehouse\r\n        </button>\r\n      </div>\r\n    `;\r\n\r\n    setTimeout(() => {\r\n      const button = document.getElementById('createWarehouseBtn');\r\n      if (button) {\r\n        button.addEventListener('click', () => {\r\n          const nameInput = document.getElementById('warehouseName');\r\n          const loadTimeInput = document.getElementById('loadTime');\r\n          const unloadTimeInput = document.getElementById('unloadTime');\r\n\r\n          if (!nameInput.value || !loadTimeInput.value || !unloadTimeInput.value) {\r\n            alert('Please fill in all fields');\r\n            return;\r\n          }\r\n\r\n          handleAddWarehouse(lng, lat, {\r\n            name: nameInput.value,\r\n            loadTime: parseInt(loadTimeInput.value),\r\n            unloadTime: parseInt(unloadTimeInput.value)\r\n          });\r\n        });\r\n      }\r\n    }, 0);\r\n\r\n    const popup = new maplibregl.Popup({ offset: 25 })\r\n      .setLngLat([lng, lat])\r\n      .setDOMContent(popupContent)\r\n      .addTo(map.current);\r\n\r\n    setCurrentPopup(popup);\r\n  };\r\n\r\n  const handleAddWarehouse = async (lng, lat, warehouseDetails) => {\r\n    const newWarehouse = {\r\n      id: warehouses.length + 1,\r\n      lng,\r\n      lat,\r\n      ...warehouseDetails\r\n    };\r\n\r\n    setWarehouses([...warehouses, newWarehouse]);\r\n    addWarehouseMarker(lng, lat, newWarehouse);\r\n\r\n    if (currentPopup) {\r\n      currentPopup.remove();\r\n      setCurrentPopup(null);\r\n    }\r\n\r\n    await createGeofence(newWarehouse);\r\n  };\r\n\r\n  const createGeofence = async (warehouse) => {\r\n    const delta = 0.0003;\r\n\r\n    const rectangleCoordinates = [\r\n      [warehouse.lat + delta, warehouse.lng - delta],\r\n      [warehouse.lat + delta, warehouse.lng + delta],\r\n      [warehouse.lat - delta, warehouse.lng + delta],\r\n      [warehouse.lat - delta, warehouse.lng - delta],\r\n      [warehouse.lat + delta, warehouse.lng - delta],\r\n    ];\r\n\r\n    const geofenceData = {\r\n      name: warehouse.name,\r\n      description: `Load Time: ${warehouse.loadTime}min, Unload Time: ${warehouse.unloadTime}min`,\r\n      area: `POLYGON((${rectangleCoordinates.map((coord) => coord.join(' ')).join(', ')}))`,\r\n      loadTime: warehouse.loadTime,\r\n      unloadTime: warehouse.unloadTime\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:8000/api/geofences', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(geofenceData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to create geofence');\r\n      }\r\n\r\n      const data = await response.json();\r\n      displayGeofenceOnMap(data);\r\n      alert(`Warehouse \"${warehouse.name}\" created successfully!`);\r\n    } catch (error) {\r\n      console.error('Error creating geofence:', error);\r\n      alert('Failed to create warehouse. Please try again.');\r\n    }\r\n  };\r\n\r\n  const addWarehouseMarker = (lng, lat, warehouse) => {\r\n    new maplibregl.Marker({ color: '#007bff' })\r\n      .setLngLat([lng, lat])\r\n      .setPopup(\r\n        new maplibregl.Popup({ offset: 25 }).setHTML(`\r\n          <div class=\"p-3\">\r\n            <h3 class=\"font-bold mb-2\">${warehouse.name}</h3>\r\n            <p><strong>Location:</strong> ${lng.toFixed(4)}, ${lat.toFixed(4)}</p>\r\n            <p><strong>Load Time:</strong> ${warehouse.loadTime} minutes</p>\r\n            <p><strong>Unload Time:</strong> ${warehouse.unloadTime} minutes</p>\r\n          </div>\r\n        `)\r\n      )\r\n      .addTo(map.current);\r\n  };\r\n\r\n  const displayGeofenceOnMap = (geofence) => {\r\n    if (!map.current || !geofence.area) {\r\n      console.warn('Map not initialized or invalid geofence:', geofence);\r\n      return;\r\n    }\r\n\r\n    const match = /POLYGON\\(\\(\\s*([^)]+)\\s*\\)\\)/.exec(geofence.area);\r\n    if (!match) {\r\n      console.warn('Could not parse geofence area:', geofence.area);\r\n      return;\r\n    }\r\n\r\n    const coordinates = match[1]\r\n      .split(', ')\r\n      .map((coord) => coord.split(' ').map(Number))\r\n      .map((coord) => [coord[1], coord[0]]);\r\n\r\n    const sourceId = `geofence-${geofence.id}`;\r\n\r\n    try {\r\n      if (!map.current.getSource(sourceId)) {\r\n        map.current.addSource(sourceId, {\r\n          type: 'geojson',\r\n          data: {\r\n            type: 'FeatureCollection',\r\n            features: [\r\n              {\r\n                type: 'Feature',\r\n                geometry: {\r\n                  type: 'Polygon',\r\n                  coordinates: [coordinates],\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        });\r\n\r\n        map.current.addLayer({\r\n          id: `geofence-layer-${geofence.id}`,\r\n          type: 'fill',\r\n          source: sourceId,\r\n          paint: {\r\n            'fill-color': '#ff0000',\r\n            'fill-opacity': 0.3,\r\n          },\r\n        });\r\n\r\n        map.current.addLayer({\r\n          id: `geofence-outline-${geofence.id}`,\r\n          type: 'line',\r\n          source: sourceId,\r\n          paint: {\r\n            'line-color': '#ff0000',\r\n            'line-width': 2,\r\n          },\r\n        });\r\n        \r\n        new maplibregl.Marker({ color: '#ff0000' })\r\n          .setLngLat([coordinates[0][0], coordinates[0][1]])\r\n          .setPopup(\r\n            new maplibregl.Popup({ offset: 25 }).setHTML(`\r\n              <div class=\"p-3\">\r\n                <h3 class=\"font-bold mb-2\">${geofence.name}</h3>\r\n                <p>${geofence.description}</p>\r\n              </div>\r\n            `)\r\n          )\r\n          .addTo(map.current);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error displaying geofence:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-screen relative\">\r\n      <div className=\"absolute inset-0\" ref={mapContainer} />\r\n      <div className=\"absolute top-4 left-4 z-10 bg-white p-4 rounded-lg shadow-lg\">\r\n        <h1 className=\"text-xl font-bold mb-2\">Add Warehouse</h1>\r\n        <p className=\"text-sm text-gray-600\">Click on the map to add a warehouse</p>\r\n      </div>\r\n      <button\r\n        className=\"absolute top-4 right-4 z-10 bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg hover:bg-blue-600 transition-colors\"\r\n        onClick={() => {\r\n          if (map.current) {\r\n            map.current.easeTo({\r\n              zoom: 12,\r\n              center: [73.8567, 18.5204],\r\n              duration: 1000,\r\n            });\r\n          }\r\n        }}\r\n      >\r\n        Reset View\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddWarehouse;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}